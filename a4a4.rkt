(define (let->combinations exp)
  (let ((args (map car (cadr exp)))
        (vals (map cadr (cadr exp)))
        (body (caddr exp)))
    (append (list (list 'lambda args body))
                  vals)))

(define (let*->nested-lets exp)
  (let ((bindings (cadr exp)))
    (define (inner l)
      (if (null? l)
          (caddr exp)
          (append (list 'let (list (list (caar l) (cadar l)))) (list (inner (cdr l))))))
    (inner bindings)))